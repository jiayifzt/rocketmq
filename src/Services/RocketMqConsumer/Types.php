<?php
namespace Services\RocketMqConsumer;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'code',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'msg',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'result',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $result = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
    }
  }

  public function getName() {
    return 'Result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Result');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 3);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'message_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'topic',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tags',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'msg',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'shardingKey',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $message_id = null;
  /**
   * @var string
   */
  public $topic = null;
  /**
   * @var string
   */
  public $tags = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $shardingKey = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message_id'])) {
        $this->message_id = $vals['message_id'];
      }
      if (isset($vals['topic'])) {
        $this->topic = $vals['topic'];
      }
      if (isset($vals['tags'])) {
        $this->tags = $vals['tags'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['shardingKey'])) {
        $this->shardingKey = $vals['shardingKey'];
      }
    }
  }

  public function getName() {
    return 'MessageInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->topic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tags);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shardingKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageInfo');
    if ($this->message_id !== null) {
      $xfer += $output->writeFieldBegin('message_id', TType::STRING, 1);
      $xfer += $output->writeString($this->message_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->topic !== null) {
      $xfer += $output->writeFieldBegin('topic', TType::STRING, 2);
      $xfer += $output->writeString($this->topic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tags !== null) {
      $xfer += $output->writeFieldBegin('tags', TType::STRING, 3);
      $xfer += $output->writeString($this->tags);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 4);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 5);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shardingKey !== null) {
      $xfer += $output->writeFieldBegin('shardingKey', TType::STRING, 6);
      $xfer += $output->writeString($this->shardingKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


